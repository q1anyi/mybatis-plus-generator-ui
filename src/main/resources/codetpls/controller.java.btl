package ${package.Controller};

import com.aochensoft.common.core.domain.Result;
import org.springframework.web.bind.annotation.*;
<% if(!restControllerStyle){ %>
import org.springframework.stereotype.Controller;
<% } %>
<% if(isNotEmpty(superControllerClassPackage)){ %>
import ${superControllerClassPackage};
<% } %>
<% if(isNotEmpty(controllerMethods.list)){  %>
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.aochensoft.framework.page.PageVo;
import com.aochensoft.framework.util.page.QueryRequest;
<% } %>
<% if(isNotEmpty(controllerMethods.hasMethod)){  %>
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${table.entityName};
import org.springframework.beans.factory.annotation.Autowired;
<% } %>
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import java.util.Objects;
import java.util.Arrays;
/**
 * <p>
 * ${table.comment!} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
<% if(restControllerStyle){ %>
@RestController
<% }else{ %>
@Controller
<% } %>
@Api(tags = "${table.comment!}接口")
@RequestMapping("<% if(isNotEmpty(package.ModuleName)){ %>/${package.ModuleName}<% } %>/<% if(isNotEmpty(controllerMappingHyphenStyle)){ %>${controllerMappingHyphen}<% }else{ %>${table.entityPath}<% } %>")
<% if(kotlin){ %>
class ${table.controllerName}<% if(isNotEmpty(superControllerClass)){ %> : ${superControllerClass}()<% } %>
<% }else{ %>
    <% if(isNotEmpty(superControllerClass)){ %>
public class ${table.controllerName} extends ${superControllerClass} {
    <% }else{ %>
public class ${table.controllerName} {
    <% } %>

    <%
       var serviceInstanceName = @cn.hutool.core.util.StrUtil.lowerFirst(table.serviceName);
    %>

    <% if(isNotEmpty(controllerMethods.hasMethod)){  %>
    @Autowired
    private ${table.serviceName} ${serviceInstanceName};
    <% } %>

    <% if(isNotEmpty(controllerMethods.list)){  %>
    @ApiOperation(value = "查询${table.comment!} 分页", notes = "查询${table.comment!} 分页")
    @GetMapping(value = "getPage")
    public Result<PageVo<${table.entityName}>> getPage(@RequestBody QueryRequest queryRequest) {
        IPage<${table.entityName}> aPage = ${serviceInstanceName}.getPage(queryRequest);
        return getDataTable(aPage);
    }
    <% } %>

    <% if(isNotEmpty(controllerMethods.getById)){ %>
    @ApiOperation(value = "获取${table.comment!} 详情", notes = "获取${table.comment!} 详情")
    @GetMapping(value = "/{id}")
    public Result<${table.entityName}> getById(@PathVariable("id") String id) {
        ${table.entityName} detail = ${serviceInstanceName}.getById(id);
        return Result.actionResult(Objects.nonNull(detail), Result.ACTION_SELECT, detail);
    }
    <% } %>

    <% if(isNotEmpty(controllerMethods.create)){ %>
    @ApiOperation(value = "新增${table.comment!} ", notes = "新增${table.comment!} ")
    @PostMapping(value = "/add")
    public Result<Object> create(@RequestBody ${table.entityName} params) {
        boolean flag = ${serviceInstanceName}.save(params);
        return Result.actionResult(flag, Result.ACTION_ADD, params.getId());
    }
    <% } %>

    <% if(isNotEmpty(controllerMethods.delete)){ %>
    @PostMapping(value = "/{ids}")
    public Result<Object> delete(@PathVariable("ids") String[] ids) {
        boolean flag = ${serviceInstanceName}.removeByIds(Arrays.asList(ids));
        return Result.actionResult(flag, Result.ACTION_DELETE, ids);
    }
    <% } %>

    <% if(isNotEmpty(controllerMethods.update)){ %>
    @ApiOperation(value = "修改${table.comment!} ", notes = "修改${table.comment!} ")
    @PostMapping(value = "/update")
    public Result<Object> update(@RequestBody ${table.entityName} params) {
        boolean flag = ${serviceInstanceName}.updateById(params);
        return Result.actionResult(flag, Result.ACTION_UPDATE, params.getId());
    }
    <% } %>
}
<% } %>
